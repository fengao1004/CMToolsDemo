package com.dayang.uploadlib.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MISSION_INFO".
*/
public class MissionInfoDao extends AbstractDao<MissionInfo, Long> {

    public static final String TABLENAME = "MISSION_INFO";

    /**
     * Properties of entity MissionInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Length = new Property(1, int.class, "length", false, "LENGTH");
        public final static Property Progress = new Property(2, int.class, "progress", false, "PROGRESS");
        public final static Property Status = new Property(3, int.class, "status", false, "STATUS");
        public final static Property Priority = new Property(4, int.class, "priority", false, "PRIORITY");
        public final static Property IsRename = new Property(5, boolean.class, "isRename", false, "IS_RENAME");
        public final static Property SessionId = new Property(6, String.class, "sessionId", false, "SESSION_ID");
        public final static Property TenantId = new Property(7, String.class, "tenantId", false, "TENANT_ID");
        public final static Property FileStatusNotifyURL = new Property(8, String.class, "fileStatusNotifyURL", false, "FILE_STATUS_NOTIFY_URL");
        public final static Property CustomParam = new Property(9, String.class, "customParam", false, "CUSTOM_PARAM");
        public final static Property FilePath = new Property(10, String.class, "filePath", false, "FILE_PATH");
        public final static Property TaskId = new Property(11, String.class, "taskId", false, "TASK_ID");
        public final static Property StorageURL = new Property(12, String.class, "storageURL", false, "STORAGE_URL");
        public final static Property FileSessionId = new Property(13, String.class, "fileSessionId", false, "FILE_SESSION_ID");
        public final static Property IndexNO = new Property(14, String.class, "indexNO", false, "INDEX_NO");
        public final static Property UploadTrunkInfoURL = new Property(15, String.class, "uploadTrunkInfoURL", false, "UPLOAD_TRUNK_INFO_URL");
        public final static Property RemoteRootPath = new Property(16, String.class, "remoteRootPath", false, "REMOTE_ROOT_PATH");
        public final static Property UpLoadType = new Property(17, int.class, "upLoadType", false, "UP_LOAD_TYPE");
        public final static Property Speed = new Property(18, double.class, "speed", false, "SPEED");
    }


    public MissionInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MissionInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MISSION_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LENGTH\" INTEGER NOT NULL ," + // 1: length
                "\"PROGRESS\" INTEGER NOT NULL ," + // 2: progress
                "\"STATUS\" INTEGER NOT NULL ," + // 3: status
                "\"PRIORITY\" INTEGER NOT NULL ," + // 4: priority
                "\"IS_RENAME\" INTEGER NOT NULL ," + // 5: isRename
                "\"SESSION_ID\" TEXT," + // 6: sessionId
                "\"TENANT_ID\" TEXT," + // 7: tenantId
                "\"FILE_STATUS_NOTIFY_URL\" TEXT," + // 8: fileStatusNotifyURL
                "\"CUSTOM_PARAM\" TEXT," + // 9: customParam
                "\"FILE_PATH\" TEXT," + // 10: filePath
                "\"TASK_ID\" TEXT," + // 11: taskId
                "\"STORAGE_URL\" TEXT," + // 12: storageURL
                "\"FILE_SESSION_ID\" TEXT," + // 13: fileSessionId
                "\"INDEX_NO\" TEXT," + // 14: indexNO
                "\"UPLOAD_TRUNK_INFO_URL\" TEXT," + // 15: uploadTrunkInfoURL
                "\"REMOTE_ROOT_PATH\" TEXT," + // 16: remoteRootPath
                "\"UP_LOAD_TYPE\" INTEGER NOT NULL ," + // 17: upLoadType
                "\"SPEED\" REAL NOT NULL );"); // 18: speed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MISSION_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MissionInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLength());
        stmt.bindLong(3, entity.getProgress());
        stmt.bindLong(4, entity.getStatus());
        stmt.bindLong(5, entity.getPriority());
        stmt.bindLong(6, entity.getIsRename() ? 1L: 0L);
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(7, sessionId);
        }
 
        String tenantId = entity.getTenantId();
        if (tenantId != null) {
            stmt.bindString(8, tenantId);
        }
 
        String fileStatusNotifyURL = entity.getFileStatusNotifyURL();
        if (fileStatusNotifyURL != null) {
            stmt.bindString(9, fileStatusNotifyURL);
        }
 
        String customParam = entity.getCustomParam();
        if (customParam != null) {
            stmt.bindString(10, customParam);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(11, filePath);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(12, taskId);
        }
 
        String storageURL = entity.getStorageURL();
        if (storageURL != null) {
            stmt.bindString(13, storageURL);
        }
 
        String fileSessionId = entity.getFileSessionId();
        if (fileSessionId != null) {
            stmt.bindString(14, fileSessionId);
        }
 
        String indexNO = entity.getIndexNO();
        if (indexNO != null) {
            stmt.bindString(15, indexNO);
        }
 
        String uploadTrunkInfoURL = entity.getUploadTrunkInfoURL();
        if (uploadTrunkInfoURL != null) {
            stmt.bindString(16, uploadTrunkInfoURL);
        }
 
        String remoteRootPath = entity.getRemoteRootPath();
        if (remoteRootPath != null) {
            stmt.bindString(17, remoteRootPath);
        }
        stmt.bindLong(18, entity.getUpLoadType());
        stmt.bindDouble(19, entity.getSpeed());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MissionInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLength());
        stmt.bindLong(3, entity.getProgress());
        stmt.bindLong(4, entity.getStatus());
        stmt.bindLong(5, entity.getPriority());
        stmt.bindLong(6, entity.getIsRename() ? 1L: 0L);
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(7, sessionId);
        }
 
        String tenantId = entity.getTenantId();
        if (tenantId != null) {
            stmt.bindString(8, tenantId);
        }
 
        String fileStatusNotifyURL = entity.getFileStatusNotifyURL();
        if (fileStatusNotifyURL != null) {
            stmt.bindString(9, fileStatusNotifyURL);
        }
 
        String customParam = entity.getCustomParam();
        if (customParam != null) {
            stmt.bindString(10, customParam);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(11, filePath);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(12, taskId);
        }
 
        String storageURL = entity.getStorageURL();
        if (storageURL != null) {
            stmt.bindString(13, storageURL);
        }
 
        String fileSessionId = entity.getFileSessionId();
        if (fileSessionId != null) {
            stmt.bindString(14, fileSessionId);
        }
 
        String indexNO = entity.getIndexNO();
        if (indexNO != null) {
            stmt.bindString(15, indexNO);
        }
 
        String uploadTrunkInfoURL = entity.getUploadTrunkInfoURL();
        if (uploadTrunkInfoURL != null) {
            stmt.bindString(16, uploadTrunkInfoURL);
        }
 
        String remoteRootPath = entity.getRemoteRootPath();
        if (remoteRootPath != null) {
            stmt.bindString(17, remoteRootPath);
        }
        stmt.bindLong(18, entity.getUpLoadType());
        stmt.bindDouble(19, entity.getSpeed());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MissionInfo readEntity(Cursor cursor, int offset) {
        MissionInfo entity = new MissionInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // length
            cursor.getInt(offset + 2), // progress
            cursor.getInt(offset + 3), // status
            cursor.getInt(offset + 4), // priority
            cursor.getShort(offset + 5) != 0, // isRename
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sessionId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tenantId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fileStatusNotifyURL
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // customParam
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // filePath
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // taskId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // storageURL
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fileSessionId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // indexNO
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // uploadTrunkInfoURL
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // remoteRootPath
            cursor.getInt(offset + 17), // upLoadType
            cursor.getDouble(offset + 18) // speed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MissionInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLength(cursor.getInt(offset + 1));
        entity.setProgress(cursor.getInt(offset + 2));
        entity.setStatus(cursor.getInt(offset + 3));
        entity.setPriority(cursor.getInt(offset + 4));
        entity.setIsRename(cursor.getShort(offset + 5) != 0);
        entity.setSessionId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTenantId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFileStatusNotifyURL(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCustomParam(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFilePath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTaskId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStorageURL(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFileSessionId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIndexNO(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUploadTrunkInfoURL(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRemoteRootPath(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUpLoadType(cursor.getInt(offset + 17));
        entity.setSpeed(cursor.getDouble(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MissionInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MissionInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MissionInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
